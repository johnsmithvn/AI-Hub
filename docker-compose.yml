version: '3.8'  # Phi√™n b·∫£n c·∫•u tr√∫c docker-compose (ƒë∆∞·ª£c gi·ªØ l·∫°i d√π c√≥ c·∫£nh b√°o kh√¥ng c·∫ßn)

services:
  # üóÑÔ∏è PostgreSQL Database + pgvector cho l∆∞u tr·ªØ d·ªØ li·ªáu v√† embedding
  postgres:
    image: pgvector/pgvector:pg15  # Image PostgreSQL t√≠ch h·ª£p pgvector
    environment:
      POSTGRES_DB: ai_hub               # T√™n database kh·ªüi t·∫°o
      POSTGRES_USER: postgres           # Username ƒëƒÉng nh·∫≠p
      POSTGRES_PASSWORD: password       # Password
    ports:
      - "5432:5432"                      # M·ªü c·ªïng PostgreSQL ra ngo√†i (host:container)
    volumes:
      - postgres_data:/var/lib/postgresql/data              # Volume Docker ƒë·ªÉ l∆∞u d·ªØ li·ªáu DB vƒ©nh vi·ªÖn
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql  # Script SQL kh·ªüi t·∫°o n·∫øu c·∫ßn
    healthcheck:  # Ki·ªÉm tra t√¨nh tr·∫°ng container postgres ƒë·ªÉ ƒë·∫£m b·∫£o kh·ªüi ƒë·ªông th√†nh c√¥ng
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ‚ö° Redis Cache d√πng cho l∆∞u session, conversation t·∫°m
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"                      # Expose c·ªïng redis
    volumes:
      - redis_data:/data                # Volume Docker l∆∞u d·ªØ li·ªáu Redis (n·∫øu c·∫ßn persist)
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ü§ñ AI-Hub - backend ch√≠nh c·ªßa h·ªá th·ªëng AI
  ai-hub:
    build: .  # Build t·ª´ Dockerfile trong th∆∞ m·ª•c hi·ªán t·∫°i
    ports:
      - "8000:8000"  # M·ªü c·ªïng API FastAPI ra ngo√†i (localhost:8000)
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:password@postgres:5432/ai_hub  # K·∫øt n·ªëi DB
      - REDIS_URL=redis://redis:6379/0                                             # K·∫øt n·ªëi Redis
    volumes:  # Mount c√°c th∆∞ m·ª•c host v√†o container ƒë·ªÉ l∆∞u data / log / model
      - ./models:/app/models                      # Th∆∞ m·ª•c ch·ª©a m√¥ h√¨nh AI (.gguf, HuggingFace...)
      - ./training_data:/app/training_data        # D·ªØ li·ªáu hu·∫•n luy·ªán
      - ./trained_models:/app/trained_models      # K·∫øt qu·∫£ fine-tune
      - ./uploads:/app/uploads                    # Upload file t·ª´ ng∆∞·ªùi d√πng
      - ./logs:/app/logs                          # Ghi log AI
    depends_on:  # Ch·ªù postgres v√† redis kh·ªüi ƒë·ªông v√† healthy tr∆∞·ªõc
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:  # Ki·ªÉm tra endpoint /health ƒë·ªÉ bi·∫øt server kh·ªüi ƒë·ªông OK ch∆∞a
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:  # C·∫•u h√¨nh ƒë·ªÉ container ƒë∆∞·ª£c ph√©p truy c·∫≠p GPU
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]  # B·∫Øt bu·ªôc ph·∫£i c√≥ ƒë·ªÉ d√πng CUDA trong container

  # üìä Prometheus ‚Äì thu th·∫≠p s·ªë li·ªáu (t√πy ch·ªçn)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"  # Truy c·∫≠p Prometheus UI t·∫°i localhost:9090
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:  # Th√™m c√°c c·ªù khi ch·∫°y Prometheus
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    profiles:
      - monitoring  # Ch·ªâ ch·∫°y khi b·∫≠t profile `monitoring`

  # üìà Grafana ‚Äì Dashboard hi·ªÉn th·ªã s·ªë li·ªáu (t√πy ch·ªçn)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"  # Truy c·∫≠p Grafana t·∫°i localhost:3000
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin  # M·∫≠t kh·∫©u admin m·∫∑c ƒë·ªãnh
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    profiles:
      - monitoring

# üîó Volume ƒë·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu vƒ©nh vi·ªÖn
volumes:
  postgres_data:   # Volume Docker cho PostgreSQL
  redis_data:      # Volume Docker cho Redis
  prometheus_data: # Volume Docker cho Prometheus
  grafana_data:    # Volume Docker cho Grafana

# üåê M·∫°ng d√πng chung cho c√°c service
networks:
  default:
    name: ai-hub-network  # T√™n m·∫°ng Docker chung cho c√°c container
